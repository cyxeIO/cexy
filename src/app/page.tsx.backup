'use client';

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Brain, Wallet, Sparkles, ArrowRight, Shield, Zap } from 'lucide-react';
import toast, { Toaster } from 'react-hot-toast';
import type { PiAuthResult, PiPayment } from '@/types/pi';
import PiPaymentModal from '@/components/PiPaymentModal';
import PiSDKLoader from '@/components/PiSDKLoader';

export default function HomePage() {
  const [walletAddress, setWalletAddress] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [registrationStatus, setRegistrationStatus] = useState<string | null>(null);
  const [user, setUser] = useState<PiAuthResult['user'] | null>(null);
  const [isAlreadyRegistered, setIsAlreadyRegistered] = useState(false);
  const [isPiSdkReady, setIsPiSdkReady] = useState(false);
  const [piSdkConfig, setPiSdkConfig] = useState<any>(null);
  const [isMainnet, setIsMainnet] = useState(() => {
    // Check localStorage for network preference, default to testnet for development
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('cexy_network_preference');
      if (saved) return saved === 'mainnet';
      return process.env.NODE_ENV === 'production'; // Mainnet in production, testnet in development
    }
    return false; // Default to testnet
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [registrationData, setRegistrationData] = useState<any>(null);

  // Metrics state
  const [metrics, setMetrics] = useState({
    totalRegistrations: 0,
    todayRegistrations: 0,
    totalPiVolume: 0
  });

  // Payment modal state
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [paymentStatus, setPaymentStatus] = useState<'creating' | 'approving' | 'waiting' | 'completing' | 'success' | 'error'>('creating');
  const [paymentError, setPaymentError] = useState<string | undefined>();
  const [paymentAmount, setPaymentAmount] = useState(0.01);
  const [paymentMemo, setPaymentMemo] = useState('');
  const [transactionDetails, setTransactionDetails] = useState<{
    transactionId?: string;
    paymentId?: string;
    registrationId?: string;
    walletAddress?: string;
    timestamp?: number;
  }>({});

  // Network toggle handler
  const handleNetworkToggle = (newIsMainnet: boolean) => {
    setIsMainnet(newIsMainnet);
    
    // Persist network preference
    if (typeof window !== 'undefined') {
      localStorage.setItem('cexy_network_preference', newIsMainnet ? 'mainnet' : 'testnet');
    }
    
    // Get the appropriate API key for the network
    const apiKey = newIsMainnet 
      ? process.env.NEXT_PUBLIC_PI_API_KEY_MAINNET
      : process.env.NEXT_PUBLIC_PI_API_KEY_TESTNET;
    
    // Update environment variable for Pi SDK with explicit sandbox setting and API key
    if (typeof window !== 'undefined') {
      (window as any).__ENV = {
        ...(window as any).__ENV || {},
        sandbox: !newIsMainnet,  // sandbox = true for testnet
        testnet: !newIsMainnet,  // testnet = true for testnet
        apiKey: apiKey           // Use correct API key for network
      };
      
      console.log('🔧 Network toggle - Updated environment:', {
        isMainnet: newIsMainnet,
        sandbox: !newIsMainnet,
        testnet: !newIsMainnet,
        apiKey: apiKey ? `${apiKey.slice(0, 8)}...${apiKey.slice(-8)}` : 'NOT SET',
        fullEnv: {
          ...((window as any).__ENV),
          apiKey: apiKey ? `${apiKey.slice(0, 8)}...${apiKey.slice(-8)}` : 'NOT SET'
        }
      });
    }
    
    // If SDK is already loaded, require a page refresh for the change to take effect
    if (isPiSdkReady) {
      toast('Network changed! Refreshing page to apply...', { 
        icon: '🔄',
        duration: 1500,
        style: {
          background: '#1f2937',
          color: '#fff',
          border: '1px solid #f59e0b',
        },
      });
      
      // Auto-refresh after a short delay
      setTimeout(() => {
        window.location.reload();
      }, 1500);
      return;
    }
    
    // Show toast about network change
    toast.success(
      `Switched to ${newIsMainnet ? 'Mainnet' : 'Testnet'} mode`, 
      { 
        duration: 2000,
        style: {
          background: newIsMainnet ? '#064e3b' : '#1f2937',
          color: newIsMainnet ? '#10b981' : '#f59e0b',
          border: `1px solid ${newIsMainnet ? '#10b981' : '#f59e0b'}`,
        }
      }
    );
  };

  // Fetch metrics
  const fetchMetrics = async () => {
    try {
      const response = await fetch('/api/metrics');
      const result = await response.json();
      
      if (result.success) {
        setMetrics({
          totalRegistrations: result.data.totalRegistrations,
          todayRegistrations: result.data.todayRegistrations,
          totalPiVolume: result.data.totalPiVolume
        });
      }
    } catch (error) {
      console.error('Failed to fetch metrics:', error);
      // Keep existing metrics on error
    }
  };

  // Pi SDK setup and event handlers
  useEffect(() => {
    if (typeof window === 'undefined') return;

    console.log('🔄 Setting up Pi SDK event listeners...');

    const handlePiSDKReady = (event: any) => {
      console.log('🎉 Pi SDK ready event received:', event.detail);
      console.log('Setting isPiSdkReady to true');
      setIsPiSdkReady(true);
      setPiSdkConfig(event.detail);
      
      // Show success toast for network connection
      if (event.detail?.mainnet) {
        toast.success('🌐 Connected to Pi Network Mainnet!', { 
          duration: 3000,
          style: {
            background: '#064e3b',
            color: '#10b981',
            border: '1px solid #10b981',
          }
        });
      } else if (event.detail?.testnet) {
        toast.success('🧪 Connected to Pi Network Testnet!', { 
          duration: 3000,
          style: {
            background: '#1f2937',
            color: '#f59e0b',
            border: '1px solid #f59e0b',
          }
        });
      }
    };

    const handlePiSDKError = (event: any) => {
      console.log('❌ Pi SDK error event received:', event.detail);
      setIsPiSdkReady(false);
      
      // Show specific message for mainnet-only mode
      if (event.detail?.mainnetOnly || event.detail?.requiresPiBrowser) {
        toast.error('� CEXY requires the official Pi Browser for mainnet functionality', {
          duration: 8000,
          style: {
            background: '#1f2937',
            color: '#fff',
            border: '1px solid #f59e0b',
          },
        });
      } else {
        toast.error('Pi SDK failed to load. Please use the official Pi Browser.', {
          duration: 5000,
        });
      }
    };

    window.addEventListener('piSDKReady', handlePiSDKReady);
    window.addEventListener('piSDKError', handlePiSDKError);

    // Check if Pi SDK is already available
    const checkExistingPiSDK = () => {
      if ((window as any).Pi) {
        console.log('✅ Pi SDK already available on window');
        console.log('Pi SDK object:', (window as any).Pi);
        console.log('Available methods:', Object.keys((window as any).Pi));
        setIsPiSdkReady(true);
        
        toast.success('🌐 Pi SDK loaded successfully!', { 
          duration: 2000,
          style: {
            background: '#064e3b',
            color: '#10b981',
            border: '1px solid #10b981',
          }
        });
      } else {
        console.log('⏳ Pi SDK not yet available, waiting for load...');
      }
    };

    // Check immediately and after a delay
    checkExistingPiSDK();
    setTimeout(checkExistingPiSDK, 2000);
    setTimeout(checkExistingPiSDK, 5000);
    
    // Add additional debugging for Pi Browser detection
    setTimeout(() => {
      console.log('🔍 Extended Pi SDK check:');
      console.log('- User Agent:', navigator.userAgent);
      console.log('- Window Pi:', (window as any).Pi);
      console.log('- Pi SDK Ready State:', isPiSdkReady);
      
      if (navigator.userAgent.includes('PiBrowser')) {
        console.log('✅ Pi Browser detected in user agent');
      } else {
        console.warn('⚠️ Pi Browser not detected in user agent - this may cause connection issues');
        // Note: Pi Browser not required for testnet development
      }
    }, 3000);

    return () => {
      window.removeEventListener('piSDKReady', handlePiSDKReady);
      window.removeEventListener('piSDKError', handlePiSDKError);
    };
  }, []);

  // Fetch metrics on component mount and periodically
  useEffect(() => {
    fetchMetrics();
    const interval = setInterval(fetchMetrics, 30000);
    return () => clearInterval(interval);
  }, []);

  // Check for existing registration
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const checkExistingRegistration = async () => {
      try {
        // First check localStorage for quick load
        const savedRegistration = localStorage.getItem('cexy_registration');
        if (savedRegistration && savedRegistration.trim()) {
          let regData;
          try {
            regData = JSON.parse(savedRegistration);
          } catch (parseError) {
            console.error('Failed to parse localStorage registration data:', parseError);
            localStorage.removeItem('cexy_registration');
            return;
          }
          
          // Validate required fields
          if (!regData.registrationId || !regData.username) {
            console.error('Invalid registration data in localStorage:', regData);
            localStorage.removeItem('cexy_registration');
            return;
          }
          
          console.log('💾 Found existing registration in localStorage:', regData);
          
          // Set state immediately for better UX
          setRegistrationData(regData);
          setIsAlreadyRegistered(true);
          setIsSubmitted(true);
          setRegistrationStatus(`🎉 Already registered! Registration ID: ${regData.registrationId}`);
          
          setTransactionDetails({
            transactionId: regData.transactionId,
            paymentId: regData.paymentId,
            registrationId: regData.registrationId,
            walletAddress: regData.walletAddress,
            timestamp: regData.timestamp
          });
          
          // Show welcome message
          toast.success(`Welcome back! Already registered as @${regData.username}`, {
            duration: 4000,
            icon: '🎉'
          });

          // Then verify with backend/blockchain in the background
          try {
            console.log('🔍 Verifying registration with backend...');
            const response = await fetch(`/api/registration/verify?userId=${regData.userId}&username=${regData.username}&walletAddress=${regData.walletAddress}`);
            const result = await response.json();

            if (result.success && result.registered) {
              console.log('✅ Registration verified with backend:', result.registrationData);
              
              // Update with fresh blockchain data if available
              const updatedData = {
                ...regData,
                ...result.registrationData,
                lastVerified: new Date().toISOString()
              };
              
              setRegistrationData(updatedData);
              localStorage.setItem('cexy_registration', JSON.stringify(updatedData));
              
              if (result.blockchainVerified) {
                toast.success('Registration verified on blockchain!', { 
                  icon: '⛓️',
                  duration: 3000 
                });
              }
            } else {
              console.log('⚠️ Registration not found in backend, clearing localStorage');
              localStorage.removeItem('cexy_registration');
              setRegistrationData(null);
              setIsAlreadyRegistered(false);
              setIsSubmitted(false);
              setRegistrationStatus(null);
              setTransactionDetails({});
              toast.error('Registration verification failed. Please register again.');
            }
          } catch (verifyError) {
            console.warn('Failed to verify registration with backend:', verifyError);
            // Keep localStorage data if backend verification fails
          }
        }
      } catch (error) {
        console.error('Error checking existing registration:', error);
      }
    };

    checkExistingRegistration();
  }, []);

  const signInWithPi = async () => {
    console.log('🔄 Sign in button clicked');
    console.log('Pi SDK Ready:', isPiSdkReady);
    console.log('Window Pi object:', (window as any).Pi);
    console.log('Pi SDK Config:', piSdkConfig);
    console.log('Current Environment:', (window as any).__ENV);
    console.log('Is Mainnet:', isMainnet);
    console.log('Sandbox mode:', !isMainnet);
    console.log('🔑 API Key being used:', (window as any).__ENV?.apiKey ? `${(window as any).__ENV.apiKey.slice(0, 8)}...${(window as any).__ENV.apiKey.slice(-8)}` : 'NOT SET');
    
    // Check if user is in Pi Browser or using sandbox mode
    console.log('� Starting Pi authentication process...');
    
    if (!isPiSdkReady) {
      console.error('❌ Pi SDK not ready');
      toast.error('Pi SDK is not ready yet. Please wait for it to load...');
      return;
    }

    try {
      const pi = (window as any).Pi;
      if (!pi) {
        console.error('❌ Pi SDK not found on window object');
        throw new Error('Pi SDK not found - please ensure you are using Pi Browser');
      }

      console.log('🔄 Attempting Pi authentication...');
      console.log('Available Pi methods:', Object.keys(pi));
      console.log('🌐 Network mode:', isMainnet ? 'MAINNET' : 'TESTNET');
      console.log('🔧 Sandbox setting:', (window as any).__ENV?.sandbox);
      console.log('🔑 Using API key:', (window as any).__ENV?.apiKey ? `${(window as any).__ENV.apiKey.slice(0, 8)}...${(window as any).__ENV.apiKey.slice(-8)}` : 'NOT SET');
      toast.loading('Connecting to Pi Network...', { id: 'pi-auth' });

      const scopes = ['username', 'payments', 'wallet_address'];
      console.log('🔄 Calling Pi.authenticate with scopes:', scopes);
      console.log('🔄 Expected network:', isMainnet ? 'Mainnet' : 'Testnet');
      
      const authResult = await pi.authenticate(scopes, onIncompletePaymentFound);
      
      console.log('✅ Pi authentication successful:', authResult);
      
      setUser(authResult.user);
      setWalletAddress(authResult.user.uid);
      
      toast.success(`Welcome, @${authResult.user.username}!`, { id: 'pi-auth' });
      
      // Check for existing registration on blockchain/backend
      await verifyExistingRegistration(authResult.user);
      
    } catch (error: any) {
      console.error('❌ Pi authentication failed:', error);
      toast.error(`Authentication failed: ${error.message}`, { id: 'pi-auth' });
    }
  };

  const verifyExistingRegistration = async (user: PiAuthResult['user']) => {
    try {
      console.log('🔍 Verifying existing registration for user:', user.username);
      toast.loading('Checking registration status...', { id: 'verify-reg' });

      const response = await fetch(`/api/registration/verify?userId=${user.uid}&username=${user.username}&walletAddress=${user.uid}`);
      const result = await response.json();

      if (result.success && result.registered) {
        console.log('✅ Found existing registration:', result.registrationData);
        
        // Update state with verified registration data
        setRegistrationData(result.registrationData);
        setIsAlreadyRegistered(true);
        setIsSubmitted(true);
        setRegistrationStatus(`🎉 Registration verified! ID: ${result.registrationData.registrationId}`);
        
        setTransactionDetails({
          transactionId: result.registrationData.transactionId,
          paymentId: result.registrationData.paymentId,
          registrationId: result.registrationData.registrationId,
          walletAddress: result.registrationData.walletAddress,
          timestamp: result.registrationData.timestamp
        });
        
        // Update localStorage with verified data
        localStorage.setItem('cexy_registration', JSON.stringify(result.registrationData));
        
        const verificationMethod = result.blockchainVerified ? 'blockchain' : 'database';
        toast.success(`Welcome back! Registration verified via ${verificationMethod}`, { 
          id: 'verify-reg',
          duration: 4000,
          icon: '🎉'
        });
      } else {
        console.log('❌ No existing registration found');
        toast.dismiss('verify-reg');
        
        // Clear any stale localStorage data
        localStorage.removeItem('cexy_registration');
        setRegistrationData(null);
        setIsAlreadyRegistered(false);
        setIsSubmitted(false);
        setRegistrationStatus(null);
        setTransactionDetails({});
      }
    } catch (error) {
      console.error('Failed to verify registration:', error);
      toast.error('Failed to verify registration status', { id: 'verify-reg' });
      
      // Clear potentially invalid localStorage data
      localStorage.removeItem('cexy_registration');
      setRegistrationData(null);
      setIsAlreadyRegistered(false);
      setIsSubmitted(false);
      setRegistrationStatus(null);
      setTransactionDetails({});
    }
  };

  const onIncompletePaymentFound = (payment: PiPayment) => {
    console.log('🔄 Incomplete payment found:', payment);
    
    setPaymentAmount(payment.amount);
    setPaymentMemo(payment.memo);
    setTransactionDetails({
      paymentId: payment.identifier,
      walletAddress: user?.uid
    });
    
    setPaymentStatus('waiting');
    setShowPaymentModal(true);
    
    toast('Incomplete payment found. Please complete it to finish registration.', { icon: 'ℹ️' });
  };

  const handleRegisterClick = async () => {
    if (!user) {
      toast.error('Please sign in with Pi Network first');
      return;
    }

    if (isAlreadyRegistered) {
      toast('You are already registered!', { icon: 'ℹ️' });
      return;
    }

    setIsRegistering(true);
    setPaymentStatus('creating');
    setShowPaymentModal(true);

    try {
      const registrationMemo = `CEXY Beta Registration - @${user.username}`;
      
      setPaymentAmount(0.01);
      setPaymentMemo(registrationMemo);
      setTransactionDetails({
        walletAddress: user.uid
      });

      console.log('🔄 Creating Pi payment for registration...');
      setPaymentStatus('approving');

      const pi = (window as any).Pi;
      const paymentData = {
        amount: 0.01,
        memo: registrationMemo,
        metadata: {
          userId: user.uid,
          username: user.username,
          registrationType: 'beta_registration'
        }
      };

      const payment = await pi.createPayment(paymentData, {
        onReadyForServerApproval: async (paymentId: string) => {
          console.log('💡 Payment ready for server approval:', paymentId);
          
          // Show progress toast
          toast.loading('Approving payment on Pi Network...', { id: 'payment-approval' });
          
          // Prevent duplicate approval calls
          if (paymentStatus === 'waiting' || paymentStatus === 'approving') {
            console.log('⚠️ Payment approval already in progress, skipping...');
            return;
          }
          
          setPaymentStatus('waiting');
          
          setTransactionDetails(prev => ({
            ...prev,
            paymentId
          }));

          try {
            console.log('🔄 Sending approval request to server...');
            
            // Add timeout and retry logic - reduced to prevent payment expiration
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
            
            const approveResponse = await fetch('/api/payments/approve', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
              },
              body: JSON.stringify({
                paymentId,
                userId: user.uid,
                username: user.username,
                isMainnet
              }),
              signal: controller.signal
            });
            
            clearTimeout(timeoutId);

            const responseData = await approveResponse.json();
            console.log('📥 Approval response:', responseData);

            if (!approveResponse.ok) {
              // Handle specific error cases more gracefully
              if (responseData.error && responseData.error.includes('already_approved')) {
                console.log('✅ Payment already approved - this is expected');
                setPaymentStatus('approving');
                return;
              }
              
              // Handle payment expiration
              if (responseData.error && (responseData.error.includes('expired') || responseData.error.includes('not found'))) {
                console.error('❌ Payment expired or not found');
                throw new Error('Payment expired. Please try again with a new payment.');
              }
              
              console.error('❌ Approval response not OK:', approveResponse.status, responseData);
              throw new Error(responseData.error || 'Payment approval failed');
            }

            console.log('✅ Payment approved on server');
            setPaymentStatus('approving');
            toast.success('Payment approved! Waiting for blockchain confirmation...', { id: 'payment-approval' });
            
          } catch (error: any) {
            console.error('❌ Server approval failed:', error);
            setPaymentStatus('error');
            
            // Handle specific error cases
            if (error.name === 'AbortError') {
              setPaymentError('Payment approval timed out. Please try again.');
              toast.error('Payment approval timed out. Please try again.');
            } else if (error.message.includes('expired') || error.message.includes('not found')) {
              setPaymentError('Payment expired. Please create a new payment.');
              toast.error('Payment expired. Please try again with a new payment.');
            } else {
              setPaymentError(`Server approval failed: ${error.message}`);
              toast.error(`Approval failed: ${error.message}`);
            }
            
            // Add specific tips based on error type
            setTimeout(() => {
              if (paymentStatus === 'error') {
                if (error.message.includes('expired') || error.message.includes('not found')) {
                  toast.error('💡 Tip: Pi payments expire quickly. Try completing the payment faster.', {
                    duration: 7000,
                    id: 'expiry-tip'
                  });
                } else {
                  toast.error('💡 Tip: Try switching between Test/Main network and back', {
                    duration: 5000,
                    id: 'retry-tip'
                  });
                }
              }
            }, 2000);
            
            throw error;
          }
        },
        onReadyForServerCompletion: async (paymentId: string, txid: string) => {
          console.log('💡 Payment ready for server completion:', { paymentId, txid });
          
          // Show completion progress
          toast.loading('Completing registration on blockchain...', { id: 'payment-completion' });
          
          // Prevent duplicate completion calls
          if (paymentStatus === 'completing') {
            console.log('⚠️ Payment completion already in progress, skipping...');
            return;
          }
          
          setPaymentStatus('completing');
          
          setTransactionDetails(prev => ({
            ...prev,
            transactionId: txid,
            timestamp: Date.now()
          }));

          try {
            console.log('💡 Payment ready for server completion:', { paymentId, txid });
            
            // Add timeout for completion
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 20000); // 20 second timeout
            
            const completeResponse = await fetch('/api/payments/complete', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
              },
              body: JSON.stringify({
                paymentId,
                txid,
                walletAddress: user.uid,
                userId: user.uid,
                username: user.username,
                isMainnet
              }),
              signal: controller.signal
            });
            
            clearTimeout(timeoutId);

            const result = await completeResponse.json();
            
            if (!completeResponse.ok) {
              // Handle "already completed" case gracefully
              if (result.error && result.error.includes('already_completed')) {
                console.log('✅ Payment already completed - this is expected');
                // Continue with successful registration flow
              } else {
                throw new Error(result.error || 'Payment completion failed');
              }
            }

            console.log('✅ Payment completed:', result);
            
            const registrationData = {
              registrationId: result.registrationId,
              username: user.username,
              userId: user.uid,
              walletAddress: user.uid,
              paymentId,
              transactionId: txid,
              status: 'completed',
              timestamp: Date.now(),
              type: 'beta_registration'
            };

            localStorage.setItem('cexy_registration', JSON.stringify(registrationData));
            
            setRegistrationData(registrationData);
            setIsSubmitted(true);
            setIsAlreadyRegistered(true);
            setPaymentStatus('success');
            
            setTransactionDetails(prev => ({
              ...prev,
              registrationId: result.registrationId
            }));

            toast.success('🎉 Registration completed successfully!', { id: 'payment-completion' });
            
          } catch (error: any) {
            console.error('❌ Payment completion failed:', error);
            
            // Handle timeout specifically
            if (error.name === 'AbortError') {
              setPaymentStatus('error');
              setPaymentError('Payment completion timed out. Please check your registration status.');
              toast.error('Payment completion timed out. Check registration status below.');
            } else {
              throw new Error(`Completion failed: ${error.message}`);
            }
          }
        },
        onCancel: (paymentId: string) => {
          console.log('❌ Payment cancelled:', paymentId);
          setPaymentStatus('error');
          setPaymentError('Payment was cancelled');
          setIsRegistering(false);
          toast.error('Payment was cancelled');
        },
        onError: (error: any, payment?: any) => {
          console.error('❌ Payment error:', error, payment);
          setPaymentStatus('error');
          setPaymentError(error.message || 'Payment failed');
          setIsRegistering(false);
          toast.error(`Payment failed: ${error.message}`);
        }
      });

      console.log('💰 Payment created:', payment);

    } catch (error: any) {
      console.error('❌ Registration failed:', error);
      setPaymentStatus('error');
      setPaymentError(error.message || 'Registration failed');
      setIsRegistering(false);
      toast.error(`Registration failed: ${error.message}`);
    }
  };

  return (
    <div className="min-h-screen bg-black text-white flex flex-col relative">
      <PiSDKLoader />
      <Toaster 
        position="bottom-right"
        toastOptions={{
          style: {
            background: 'rgba(0, 0, 0, 0.9)',
            color: '#ffffff',
            border: '1px solid rgba(147, 51, 234, 0.3)',
            borderRadius: '12px',
          },
        }}
      />
      
      {/* Subtle animated logo in top-right corner */}
      <div className="fixed top-4 right-4 z-10 opacity-20 hover:opacity-60 transition-opacity duration-300">
        <img 
          src="/CEXY_logo_animated.gif" 
          alt="cexy.ai" 
          className="w-8 h-8 sm:w-10 sm:h-10" 
        />
      </div>
      
      {/* Mobile-Optimized Background */}
      <div className="fixed inset-0 -z-10">
        <div className="absolute inset-0 bg-gradient-to-b from-purple-900/20 via-black to-cyan-900/20" />
        <div className="absolute top-1/4 left-1/2 w-64 h-64 -translate-x-1/2 bg-purple-500/10 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-1/4 left-1/2 w-64 h-64 -translate-x-1/2 bg-cyan-500/10 rounded-full blur-3xl animate-pulse" />
      </div>

      {/* Main Mobile Content */}
      <div className="flex-1 flex flex-col items-center justify-center px-4 py-8 space-y-8">
        
        {!isSubmitted ? (
          <>
            {/* Mobile Hero Section */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="text-center space-y-6"
            >
              {/* Large Logo */}
              <div className="flex justify-center mb-8">
                <img src="/cexy_logo_transparent.gif" alt="Logo" className="w-64 h-40 object-contain" />
              </div>
              
              {/* Stats under logo */}
              <div className="flex items-center justify-center gap-8 text-sm mb-8 px-8 py-4 bg-gray-900/30 border border-gray-700/30 rounded-lg backdrop-blur-sm">
                <div className="flex items-center gap-3">
                  <motion.div 
                    className="w-1.5 h-1.5 bg-purple-400 rounded-full"
                    animate={{ opacity: [0.5, 1, 0.5] }}
                    transition={{ duration: 2, repeat: Infinity }}
                  />
                  <span className="text-gray-400 text-xs">Beta Users</span>
                  <span className="text-white font-semibold">{metrics.totalRegistrations}</span>
                </div>
                
                <span className="text-gray-500 text-lg font-light">|</span>
                
                <div className="flex items-center gap-3">
                  <span className="text-gray-400 text-xs">Today</span>
                  <span className="text-white font-semibold">{metrics.todayRegistrations}</span>
                </div>
                
                <span className="text-gray-500 text-lg font-light">|</span>
                
                <div className="flex items-center gap-3">
                  <span className="text-gray-400 text-xs">Volume</span>
                  <span className="text-white font-semibold">{metrics.totalPiVolume}π</span>
                </div>
              </div>
            </motion.div>

            {/* Mobile CTA Section */}
            {user ? (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.5 }}
                className="text-center space-y-4"
              >
                <div className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 backdrop-blur-sm border border-green-500/30 rounded-2xl p-6">
                  <div className="flex items-center justify-center gap-2 mb-3">
                    <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                    <span className="text-green-300 font-medium">Connected as @{user.username}</span>
                  </div>
                  <p className="text-sm text-gray-400 mb-4">Ready to join the CEXY beta!</p>
                  
                  <button
                    onClick={handleRegisterClick}
                    disabled={isRegistering}
                    className="w-full bg-gradient-to-r from-purple-500 to-cyan-500 hover:from-purple-600 hover:to-cyan-600 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:transform-none"
                  >
                    {isRegistering ? (
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        Processing...
                      </div>
                    ) : (
                      <div className="flex items-center justify-center gap-2">
                        <Wallet size={20} />
                        Join Beta (0.01π)
                      </div>
                    )}
                  </button>
                </div>
              </motion.div>
            ) : (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.3 }}
                className="flex justify-center mt-8"
              >
                <div className="w-full max-w-xs">
                  <button
                    onClick={signInWithPi}
                    disabled={!isPiSdkReady}
                    className="w-full bg-black hover:bg-gray-900 disabled:bg-gray-800 border border-purple-500/30 hover:border-purple-400 disabled:border-gray-600 text-white font-medium py-2.5 px-5 rounded-xl transition-all duration-300 transform hover:scale-105 disabled:opacity-60 disabled:transform-none shadow-lg hover:shadow-purple-500/20 disabled:shadow-none text-sm"
                  >
                    {isPiSdkReady ? (
                      <div className="flex items-center justify-center gap-2">
                        <img src="/pi_logo.png" alt="Pi" className="w-4 h-4" />
                        <span>Join Beta</span>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-3 h-3 border-2 border-white/40 border-t-white rounded-full animate-spin"></div>
                        <span>Loading Pi SDK...</span>
                      </div>
                    )}
                  </button>
                  
                  {process.env.NODE_ENV === 'development' && !isPiSdkReady && (
                    <>
                      <button
                        onClick={() => {
                          console.log('🔧 Force checking Pi SDK availability...');
                          if ((window as any).Pi) {
                            console.log('✅ Pi SDK found on window, enabling...');
                            setIsPiSdkReady(true);
                          } else {
                            console.log('❌ Pi SDK still not available on window');
                            toast.error('Pi SDK not available. Check network connection.');
                          }
                        }}
                        className="w-full mt-3 bg-blue-500/20 border border-blue-500/30 text-blue-300 font-medium py-2 px-4 rounded-xl hover:bg-blue-500/30 transition-all text-sm"
                      >
                        Force Check Pi SDK (Dev Only)
                      </button>
                      
                      <button
                        onClick={() => {
                          console.log('🔧 Resetting network to testnet...');
                          localStorage.setItem('cexy_network_preference', 'testnet');
                          const testnetApiKey = process.env.NEXT_PUBLIC_PI_API_KEY_TESTNET;
                          (window as any).__ENV = {
                            ...(window as any).__ENV || {},
                            sandbox: true,
                            testnet: true,
                            apiKey: testnetApiKey
                          };
                          setIsMainnet(false);
                          console.log('🔑 Using testnet API key:', testnetApiKey ? `${testnetApiKey.slice(0, 8)}...${testnetApiKey.slice(-8)}` : 'NOT SET');
                          toast.success('🧪 Reset to testnet mode - refresh to apply!');
                          setTimeout(() => window.location.reload(), 1500);
                        }}
                        className="w-full mt-2 bg-orange-500/20 border border-orange-500/30 text-orange-300 font-medium py-2 px-4 rounded-xl hover:bg-orange-500/30 transition-all text-sm"
                      >
                        Force Testnet Reset (Dev Only)
                      </button>
                    </>
                  )}
                </div>
              </motion.div>
            )}
          </>
        ) : (
          /* Registration Success - Mobile Layout */
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="text-center space-y-6"
          >
            {/* Success Icon */}
            <div className="flex justify-center">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.2, type: "spring" }}
                className="w-20 h-20 rounded-full flex items-center justify-center"
              >
                <img 
                  src="/CEXY_logo_animated.gif" 
                  alt="CEXY Success" 
                  className="w-20 h-20 object-contain" 
                />
              </motion.div>
            </div>

            <div className="space-y-4">
              <h2 className="text-2xl font-bold text-white">Welcome to CEXY!</h2>
              <p className="text-gray-300">Your Pi wallet is now registered on the blockchain for early access</p>
            </div>

            {/* Registration Details - Mobile Card */}
            {registrationData && (
              <div className="bg-gradient-to-r from-purple-500/10 to-cyan-500/10 backdrop-blur-sm border border-white/20 rounded-2xl p-6 text-left space-y-3">
                <div className="flex items-center gap-2 mb-4">
                  <img src="/pi_logo.png" alt="Pi" className="w-5 h-5" />
                  <span className="text-orange-400 font-semibold">Pi Network Registration</span>
                  {registrationData.blockchainVerified && (
                    <div className="ml-auto flex items-center gap-1">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span className="text-green-400 text-xs font-medium">Blockchain Verified</span>
                    </div>
                  )}
                </div>
                
                <div className="space-y-3 text-sm">
                  <div>
                    <span className="text-gray-400">Username:</span>
                    <span className="text-white font-mono ml-2">@{registrationData.username}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Registration ID:</span>
                    <span className="text-cyan-400 font-mono ml-2 break-all">{registrationData.registrationId}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Wallet:</span>
                    <button
                      onClick={() => {
                        const explorerUrl = isMainnet 
                          ? `https://blockexplorer.minepi.com/mainnet/address/${registrationData.walletAddress}`
                          : `https://blockexplorer.minepi.com/testnet/address/${registrationData.walletAddress}`;
                        window.open(explorerUrl, '_blank');
                      }}
                      className="text-white hover:text-gray-300 font-mono ml-2 break-all underline cursor-pointer transition-colors"
                      title="Click to view wallet on Pi Explorer"
                    >
                      {registrationData.walletAddress?.slice(0, 12)}...{registrationData.walletAddress?.slice(-8)}
                    </button>
                  </div>
                  {transactionDetails.transactionId && (
                    <div>
                      <span className="text-gray-400">Transaction:</span>
                      <button
                        onClick={() => {
                          const explorerUrl = isMainnet 
                            ? `https://blockexplorer.minepi.com/mainnet/tx/${transactionDetails.transactionId}`
                            : `https://blockexplorer.minepi.com/testnet/tx/${transactionDetails.transactionId}`;
                          window.open(explorerUrl, '_blank');
                        }}
                        className="text-yellow-400 hover:text-yellow-300 font-mono ml-2 break-all underline cursor-pointer transition-colors"
                        title="Click to view on Pi Explorer"
                      >
                        {transactionDetails.transactionId.slice(0, 12)}...{transactionDetails.transactionId.slice(-8)}
                      </button>
                    </div>
                  )}
                  <div>
                    <span className="text-gray-400">Status:</span>
                    <span className="text-green-400 font-semibold ml-2">● Confirmed</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Registered:</span>
                    <span className="text-white ml-2">{registrationData.timestamp ? new Date(registrationData.timestamp).toLocaleDateString() : new Date().toLocaleDateString()}</span>
                  </div>
                </div>

                {/* Mobile Action Buttons */}
                <div className="grid gap-3 pt-4">
                  <button
                    onClick={async () => {
                      try {
                        toast.loading('Fetching latest registration details...', { id: 'refresh-reg' });
                        
                        const response = await fetch('/api/registration/verify', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            userId: registrationData.userId,
                            walletAddress: registrationData.walletAddress,
                            includeTransactionHistory: true
                          })
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                          // Update with fresh blockchain data
                          setRegistrationData({
                            ...registrationData,
                            ...result.registrationData,
                            transactionHistory: result.transactionHistory,
                            blockchainStatus: result.blockchainStatus,
                            lastVerified: new Date().toISOString()
                          });
                          
                          localStorage.setItem('cexy_registration', JSON.stringify({
                            ...registrationData,
                            ...result.registrationData,
                            lastVerified: new Date().toISOString()
                          }));
                          
                          toast.success(`Registration verified! ${result.transactionHistory?.length || 0} transactions found`, { id: 'refresh-reg' });
                          setShowPaymentModal(true);
                        } else {
                          toast.error('Failed to refresh registration data', { id: 'refresh-reg' });
                        }
                      } catch (error) {
                        console.error('Failed to refresh registration:', error);
                        toast.error('Failed to refresh registration data', { id: 'refresh-reg' });
                      }
                    }}
                    className="w-full bg-gradient-to-r from-orange-500/20 to-yellow-500/20 border border-orange-500/30 text-orange-300 font-medium py-3 px-4 rounded-xl hover:bg-orange-500/30 transition-all"
                  >
                    <div className="flex items-center justify-center gap-2">
                      <img src="/pi_logo.png" alt="Pi" className="w-4 h-4" />
                      Refresh from Blockchain
                    </div>
                  </button>
                  
                  {transactionDetails.transactionId && (
                    <button
                      onClick={() => {
                        const explorerUrl = isMainnet 
                          ? `https://blockexplorer.minepi.com/mainnet/tx/${transactionDetails.transactionId}`
                          : `https://blockexplorer.minepi.com/testnet/tx/${transactionDetails.transactionId}`;
                        window.open(explorerUrl, '_blank');
                      }}
                      className="w-full bg-gradient-to-r from-purple-500/20 to-cyan-500/20 border border-purple-500/30 text-purple-300 font-medium py-3 px-4 rounded-xl hover:bg-purple-500/30 transition-all"
                    >
                      <div className="flex items-center justify-center gap-2">
                        <ArrowRight size={16} />
                        View on Pi Explorer
                      </div>
                    </button>
                  )}
                  
                  {process.env.NODE_ENV === 'development' && (
                    <button
                      onClick={async () => {
                        console.log('🧹 Clearing registration data (frontend + backend)...');
                        
                        try {
                          // Clear from backend first
                          const clearResponse = await fetch('/api/registration/clear', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                              userId: user?.uid,
                              walletAddress: registrationData?.walletAddress,
                              clearAll: true // For dev purposes, clear all registrations
                            })
                          });
                          
                          if (clearResponse.ok) {
                            console.log('✅ Backend registration data cleared');
                          } else {
                            console.warn('⚠️ Failed to clear backend data, continuing with frontend clear');
                          }
                        } catch (error) {
                          console.warn('⚠️ Error clearing backend data:', error);
                        }
                        
                        // Clear localStorage
                        localStorage.removeItem('cexy_registration');
                        
                        // Reset all registration-related state
                        setIsAlreadyRegistered(false);
                        setIsSubmitted(false);
                        setRegistrationData(null);
                        setRegistrationStatus(null);
                        setTransactionDetails({});
                        setPaymentStatus('creating');
                        setPaymentError(undefined);
                        setIsRegistering(false);
                        setShowPaymentModal(false);
                        
                        console.log('✅ Registration data cleared completely');
                        toast.success('Registration cleared completely! You can register again.');
                      }}
                      className="w-full bg-red-500/20 border border-red-500/30 text-red-300 font-medium py-3 px-4 rounded-xl hover:bg-red-500/30 transition-all"
                    >
                      Clear Registration (Dev Only)
                    </button>
                  )}
                </div>
              </div>
            )}
          </motion.div>
        )}
      </div>

      {/* Footer */}
      <footer className="mt-auto py-4 px-4 border-t border-white/10 bg-black/50 backdrop-blur-sm">
        <div className="max-w-4xl mx-auto flex justify-center">
          <div className="flex flex-wrap items-center justify-center gap-4 sm:gap-6 text-xs text-gray-400">
            {/* Copyright */}
            <div className="flex items-center gap-2">
              <span>© 2025 cexy.ai</span>
              <div className="w-1 h-1 bg-gray-500 rounded-full"></div>
              <span>Pi Network</span>
              <div className="w-1 h-1 bg-gray-500 rounded-full"></div>
              <span className="text-gray-500">v1.0</span>
            </div>
            
            {/* Network Toggle */}
            <div className="flex items-center gap-2 px-3 py-1.5 bg-gray-800/50 rounded-lg border border-gray-700/50">
              <span className={`text-xs font-medium transition-colors ${!isMainnet ? 'text-purple-400' : 'text-gray-500'}`}>
                Test
              </span>
              <button
                onClick={() => handleNetworkToggle(!isMainnet)}
                className={`relative w-8 h-4 rounded-full transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-purple-500/50 ${
                  isMainnet ? 'bg-green-500' : 'bg-purple-500'
                }`}
                title={`Switch to ${isMainnet ? 'Testnet' : 'Mainnet'}${isPiSdkReady ? ' (will refresh page)' : ''}`}
              >
                <div className={`absolute top-0.5 w-3 h-3 bg-white rounded-full transition-transform duration-300 ${
                  isMainnet ? 'translate-x-4' : 'translate-x-0.5'
                }`} />
              </button>
              <span className={`text-xs font-medium transition-colors ${isMainnet ? 'text-green-400' : 'text-gray-500'}`}>
                Main
              </span>
            </div>
            
            {/* Legal links and Social */}
            <div className="flex items-center gap-3">
              <a 
                href="/privacy" 
                className="text-gray-500 hover:text-purple-400 transition-colors underline"
              >
                Privacy
              </a>
              <div className="w-1 h-1 bg-gray-600 rounded-full"></div>
              <a 
                href="/terms" 
                className="text-gray-500 hover:text-purple-400 transition-colors underline"
              >
                Terms
              </a>
              <div className="w-1 h-1 bg-gray-600 rounded-full"></div>
              <a 
                href="https://x.com/cexyai" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-gray-500 hover:text-purple-400 transition-colors"
                title="Follow us on X"
              >
                <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
              </a>
            </div>
          </div>
        </div>
      </footer>

      {/* Pi Browser Requirement Modal */}
      {showPiBrowserModal && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-black border border-white/20 rounded-2xl p-6 max-w-md w-full text-center space-y-6 relative"
          >
            {/* Close X Button */}
            <button
              onClick={() => setShowPiBrowserModal(false)}
              className="absolute top-4 right-4 w-8 h-8 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 text-gray-400 hover:text-white transition-all"
            >
              ✕
            </button>
            
            {/* Header */}
            <div className="space-y-3">
              <div className="w-16 h-16 mx-auto bg-gradient-to-r from-orange-500/20 to-purple-500/20 rounded-full flex items-center justify-center border border-orange-500/30">
                <img src="/pi_logo.png" alt="Pi Network" className="w-8 h-8" />
              </div>
              <h3 className="text-xl font-bold text-white">Pi Browser Required</h3>
              <p className="text-gray-300 text-sm leading-relaxed">
                CEXY integrates directly with Pi Network's blockchain. To ensure secure authentication and payments, you must use the official Pi Browser.
              </p>
            </div>

            {/* Download Instructions */}
            <div className="space-y-4 text-left">
              <div className="bg-gradient-to-r from-purple-500/10 to-orange-500/10 border border-purple-500/20 rounded-xl p-4">
                <h4 className="text-white font-semibold mb-3 flex items-center gap-2">
                  <span className="w-2 h-2 bg-orange-500 rounded-full"></span>
                  Download Pi Browser
                </h4>
                <div className="space-y-3 text-sm text-gray-300">
                  <div className="flex items-start gap-3">
                    <span className="text-purple-400 font-mono text-xs bg-purple-500/20 px-2 py-1 rounded">iOS</span>
                    <span>Search "Pi Browser" in the App Store</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="text-orange-400 font-mono text-xs bg-orange-500/20 px-2 py-1 rounded">Android</span>
                    <span>Search "Pi Browser" in Google Play Store</span>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-r from-orange-500/10 to-purple-500/10 border border-orange-500/20 rounded-xl p-4">
                <h4 className="text-white font-semibold mb-3 flex items-center gap-2">
                  <span className="w-2 h-2 bg-purple-500 rounded-full"></span>
                  After Installation
                </h4>
                <div className="space-y-2 text-sm text-gray-300">
                  <div className="flex items-start gap-2">
                    <span className="text-orange-400 text-xs">1.</span>
                    <span>Open Pi Browser</span>
                  </div>
                  <div className="flex items-start gap-2">
                    <span className="text-orange-400 text-xs">2.</span>
                    <span>Navigate to cexy.ai</span>
                  </div>
                  <div className="flex items-start gap-2">
                    <span className="text-orange-400 text-xs">3.</span>
                    <span>Connect your Pi wallet seamlessly</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="space-y-3 pt-2">
              <button
                onClick={() => {
                  // Copy cexy.ai URL to clipboard
                  navigator.clipboard.writeText('https://cexy.ai').then(() => {
                    toast.success('cexy.ai copied to clipboard!', {
                      duration: 2000,
                      style: {
                        background: 'rgba(0, 0, 0, 0.9)',
                        color: '#ffffff',
                        border: '1px solid rgba(251, 146, 60, 0.3)',
                      },
                    });
                  }).catch(() => {
                    toast.error('Failed to copy URL');
                  });
                }}
                className="w-full bg-gradient-to-r from-orange-500 to-purple-500 hover:from-orange-600 hover:to-purple-600 text-white font-semibold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105"
              >
                Copy cexy.ai URL
              </button>
              
              <button
                onClick={() => setShowPiBrowserModal(false)}
                className="w-full bg-white/10 hover:bg-white/20 border border-white/20 text-white font-medium py-3 px-4 rounded-xl transition-all"
              >
                I'll Download Pi Browser
              </button>
              
              {/* Debug/Testing Skip Button - only show in development or testnet */}
              {(!isMainnet || process.env.NODE_ENV === 'development') && (
                <button
                  onClick={() => {
                    console.log('🧪 Skipping Pi Browser requirement for testing');
                    setShowPiBrowserModal(false);
                  }}
                  className="w-full bg-yellow-600/20 hover:bg-yellow-600/30 border border-yellow-500/30 text-yellow-300 font-medium py-2 px-4 rounded-xl transition-all text-sm"
                >
                  Skip for Testing (Sandbox Mode)
                </button>
              )}
            </div>

            {/* Small note */}
            <p className="text-xs text-gray-500 leading-relaxed">
            </p>
          </motion.div>
        </div>
      )}

      {/* Pi Payment Modal */}
      <PiPaymentModal
        isOpen={showPaymentModal}
        onClose={() => {
          setShowPaymentModal(false);
          if (paymentStatus === 'success') {
            setIsRegistering(false);
            toast.success('🎉 Welcome to CEXY Beta! Your registration is confirmed on the Pi blockchain!');
          } else if (paymentStatus === 'error') {
            setIsRegistering(false);
          }
        }}
        amount={paymentAmount}
        memo={paymentMemo}
        status={paymentStatus}
        error={paymentError}
        transactionDetails={{
          ...transactionDetails,
          blockchainVerified: registrationData?.blockchainVerified,
          blockchainStatus: registrationData?.blockchainStatus,
          transactionHistory: registrationData?.transactionHistory,
          lastVerified: registrationData?.lastVerified
        }}
      />
    </div>
  );
}
